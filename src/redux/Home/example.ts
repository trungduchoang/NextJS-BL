// libs
import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
// others
import type { AppThunk } from "../store";

// TODO: Remove this example when all use cases is used
export async function fetchExample(amount = 1): Promise<{ data: number }> {
  const response = await fetch("/api/homeData", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ amount }),
  });
  const result = await response.json();

  return result;
}

export interface CounterState {
  exampleField: number;
  status: "idle" | "loading" | "failed";
}

const initialState: CounterState = {
  exampleField: 0,
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  "homeData/fetchExample",
  async (amount: number) => {
    const response = await fetchExample(amount);
    // The exampleField we return becomes the `fulfilled` action payload
    return response.data;
  },
);

export const counterSlice = createSlice({
  name: "homeData",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.exampleField += 1;
    },
    decrement: (state) => {
      state.exampleField -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.exampleField += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.exampleField += action.payload;
      });
  },
});

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = getState().exampleReducer.exampleField;
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount));
    }
  };

export const { increment, decrement, incrementByAmount } = counterSlice.actions;
export default counterSlice.reducer;
